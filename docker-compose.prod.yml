version: '3.8'

services:
  # Frontend (Next.js)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend:8000
      - NEXT_PUBLIC_SITE_URL=https://dostumkitab.az
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - faziletkitab-network

  # Backend (Django)
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    ports:
      - "8000:8000"
    environment:
      - DJANGO_ENV=production
      - DJANGO_SETTINGS_MODULE=kitab_backend.settings.production
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=False
      - ALLOWED_HOSTS=dostumkitab.az,www.dostumkitab.az,localhost,127.0.0.1
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - IMAGEKIT_ENABLED=${IMAGEKIT_ENABLED}
      - IMAGEKIT_PUBLIC_KEY=${IMAGEKIT_PUBLIC_KEY}
      - IMAGEKIT_PRIVATE_KEY=${IMAGEKIT_PRIVATE_KEY}
      - IMAGEKIT_URL_ENDPOINT=${IMAGEKIT_URL_ENDPOINT}
      - IMAGEKIT_FOLDER=${IMAGEKIT_FOLDER}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - SECURE_SSL_REDIRECT=True
      - SECURE_HSTS_SECONDS=31536000
      - SECURE_HSTS_INCLUDE_SUBDOMAINS=True
      - SECURE_HSTS_PRELOAD=True
      - SECURE_BROWSER_XSS_FILTER=True
      - SECURE_CONTENT_TYPE_NOSNIFF=True
      - X_FRAME_OPTIONS=DENY
      - SESSION_COOKIE_SECURE=True
      - CSRF_COOKIE_SECURE=True
      - SESSION_COOKIE_HTTPONLY=True
      - CSRF_COOKIE_HTTPONLY=True
      - LOG_LEVEL=INFO
      - LOG_FILE=/var/log/django/kitab_backend.log
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - faziletkitab-network
    volumes:
      - media_files:/app/media
      - static_files:/app/static
      - django_logs:/var/log/django

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/postgresql_setup.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - faziletkitab-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - faziletkitab-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - static_files:/var/www/static:ro
      - media_files:/var/www/media:ro
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - faziletkitab-network

volumes:
  postgres_data:
  redis_data:
  media_files:
  static_files:
  django_logs:

networks:
  faziletkitab-network:
    driver: bridge 